/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UserRouteImport } from './routes/user'
import { Route as TestimonialsRouteImport } from './routes/testimonials'
import { Route as LocationsRouteImport } from './routes/locations'
import { Route as ContactsRouteImport } from './routes/contacts'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as VehiclesIndexRouteImport } from './routes/vehicles/index'
import { Route as BookingsIndexRouteImport } from './routes/bookings/index'
import { Route as UserTestimonialsRouteImport } from './routes/user/testimonials'
import { Route as UserProfileRouteImport } from './routes/user/profile'
import { Route as UserBookingsRouteImport } from './routes/user/bookings'
import { Route as AdminVehiclesRouteImport } from './routes/admin/vehicles'
import { Route as AdminUsersRouteImport } from './routes/admin/users'
import { Route as AdminTestimonialsRouteImport } from './routes/admin/testimonials'
import { Route as AdminOverviewRouteImport } from './routes/admin/overview'
import { Route as AdminBookingsRouteImport } from './routes/admin/bookings'

const UserRoute = UserRouteImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => rootRouteImport,
} as any)
const TestimonialsRoute = TestimonialsRouteImport.update({
  id: '/testimonials',
  path: '/testimonials',
  getParentRoute: () => rootRouteImport,
} as any)
const LocationsRoute = LocationsRouteImport.update({
  id: '/locations',
  path: '/locations',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactsRoute = ContactsRouteImport.update({
  id: '/contacts',
  path: '/contacts',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const VehiclesIndexRoute = VehiclesIndexRouteImport.update({
  id: '/vehicles/',
  path: '/vehicles/',
  getParentRoute: () => rootRouteImport,
} as any)
const BookingsIndexRoute = BookingsIndexRouteImport.update({
  id: '/bookings/',
  path: '/bookings/',
  getParentRoute: () => rootRouteImport,
} as any)
const UserTestimonialsRoute = UserTestimonialsRouteImport.update({
  id: '/testimonials',
  path: '/testimonials',
  getParentRoute: () => UserRoute,
} as any)
const UserProfileRoute = UserProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => UserRoute,
} as any)
const UserBookingsRoute = UserBookingsRouteImport.update({
  id: '/bookings',
  path: '/bookings',
  getParentRoute: () => UserRoute,
} as any)
const AdminVehiclesRoute = AdminVehiclesRouteImport.update({
  id: '/vehicles',
  path: '/vehicles',
  getParentRoute: () => AdminRoute,
} as any)
const AdminUsersRoute = AdminUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AdminRoute,
} as any)
const AdminTestimonialsRoute = AdminTestimonialsRouteImport.update({
  id: '/testimonials',
  path: '/testimonials',
  getParentRoute: () => AdminRoute,
} as any)
const AdminOverviewRoute = AdminOverviewRouteImport.update({
  id: '/overview',
  path: '/overview',
  getParentRoute: () => AdminRoute,
} as any)
const AdminBookingsRoute = AdminBookingsRouteImport.update({
  id: '/bookings',
  path: '/bookings',
  getParentRoute: () => AdminRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/admin': typeof AdminRouteWithChildren
  '/contact': typeof ContactRoute
  '/contacts': typeof ContactsRoute
  '/locations': typeof LocationsRoute
  '/testimonials': typeof TestimonialsRoute
  '/user': typeof UserRouteWithChildren
  '/admin/bookings': typeof AdminBookingsRoute
  '/admin/overview': typeof AdminOverviewRoute
  '/admin/testimonials': typeof AdminTestimonialsRoute
  '/admin/users': typeof AdminUsersRoute
  '/admin/vehicles': typeof AdminVehiclesRoute
  '/user/bookings': typeof UserBookingsRoute
  '/user/profile': typeof UserProfileRoute
  '/user/testimonials': typeof UserTestimonialsRoute
  '/bookings': typeof BookingsIndexRoute
  '/vehicles': typeof VehiclesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/admin': typeof AdminRouteWithChildren
  '/contact': typeof ContactRoute
  '/contacts': typeof ContactsRoute
  '/locations': typeof LocationsRoute
  '/testimonials': typeof TestimonialsRoute
  '/user': typeof UserRouteWithChildren
  '/admin/bookings': typeof AdminBookingsRoute
  '/admin/overview': typeof AdminOverviewRoute
  '/admin/testimonials': typeof AdminTestimonialsRoute
  '/admin/users': typeof AdminUsersRoute
  '/admin/vehicles': typeof AdminVehiclesRoute
  '/user/bookings': typeof UserBookingsRoute
  '/user/profile': typeof UserProfileRoute
  '/user/testimonials': typeof UserTestimonialsRoute
  '/bookings': typeof BookingsIndexRoute
  '/vehicles': typeof VehiclesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/admin': typeof AdminRouteWithChildren
  '/contact': typeof ContactRoute
  '/contacts': typeof ContactsRoute
  '/locations': typeof LocationsRoute
  '/testimonials': typeof TestimonialsRoute
  '/user': typeof UserRouteWithChildren
  '/admin/bookings': typeof AdminBookingsRoute
  '/admin/overview': typeof AdminOverviewRoute
  '/admin/testimonials': typeof AdminTestimonialsRoute
  '/admin/users': typeof AdminUsersRoute
  '/admin/vehicles': typeof AdminVehiclesRoute
  '/user/bookings': typeof UserBookingsRoute
  '/user/profile': typeof UserProfileRoute
  '/user/testimonials': typeof UserTestimonialsRoute
  '/bookings/': typeof BookingsIndexRoute
  '/vehicles/': typeof VehiclesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/admin'
    | '/contact'
    | '/contacts'
    | '/locations'
    | '/testimonials'
    | '/user'
    | '/admin/bookings'
    | '/admin/overview'
    | '/admin/testimonials'
    | '/admin/users'
    | '/admin/vehicles'
    | '/user/bookings'
    | '/user/profile'
    | '/user/testimonials'
    | '/bookings'
    | '/vehicles'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/admin'
    | '/contact'
    | '/contacts'
    | '/locations'
    | '/testimonials'
    | '/user'
    | '/admin/bookings'
    | '/admin/overview'
    | '/admin/testimonials'
    | '/admin/users'
    | '/admin/vehicles'
    | '/user/bookings'
    | '/user/profile'
    | '/user/testimonials'
    | '/bookings'
    | '/vehicles'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/admin'
    | '/contact'
    | '/contacts'
    | '/locations'
    | '/testimonials'
    | '/user'
    | '/admin/bookings'
    | '/admin/overview'
    | '/admin/testimonials'
    | '/admin/users'
    | '/admin/vehicles'
    | '/user/bookings'
    | '/user/profile'
    | '/user/testimonials'
    | '/bookings/'
    | '/vehicles/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  AdminRoute: typeof AdminRouteWithChildren
  ContactRoute: typeof ContactRoute
  ContactsRoute: typeof ContactsRoute
  LocationsRoute: typeof LocationsRoute
  TestimonialsRoute: typeof TestimonialsRoute
  UserRoute: typeof UserRouteWithChildren
  BookingsIndexRoute: typeof BookingsIndexRoute
  VehiclesIndexRoute: typeof VehiclesIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/user': {
      id: '/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof UserRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/testimonials': {
      id: '/testimonials'
      path: '/testimonials'
      fullPath: '/testimonials'
      preLoaderRoute: typeof TestimonialsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/locations': {
      id: '/locations'
      path: '/locations'
      fullPath: '/locations'
      preLoaderRoute: typeof LocationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contacts': {
      id: '/contacts'
      path: '/contacts'
      fullPath: '/contacts'
      preLoaderRoute: typeof ContactsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/vehicles/': {
      id: '/vehicles/'
      path: '/vehicles'
      fullPath: '/vehicles'
      preLoaderRoute: typeof VehiclesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/bookings/': {
      id: '/bookings/'
      path: '/bookings'
      fullPath: '/bookings'
      preLoaderRoute: typeof BookingsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/user/testimonials': {
      id: '/user/testimonials'
      path: '/testimonials'
      fullPath: '/user/testimonials'
      preLoaderRoute: typeof UserTestimonialsRouteImport
      parentRoute: typeof UserRoute
    }
    '/user/profile': {
      id: '/user/profile'
      path: '/profile'
      fullPath: '/user/profile'
      preLoaderRoute: typeof UserProfileRouteImport
      parentRoute: typeof UserRoute
    }
    '/user/bookings': {
      id: '/user/bookings'
      path: '/bookings'
      fullPath: '/user/bookings'
      preLoaderRoute: typeof UserBookingsRouteImport
      parentRoute: typeof UserRoute
    }
    '/admin/vehicles': {
      id: '/admin/vehicles'
      path: '/vehicles'
      fullPath: '/admin/vehicles'
      preLoaderRoute: typeof AdminVehiclesRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/users': {
      id: '/admin/users'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/testimonials': {
      id: '/admin/testimonials'
      path: '/testimonials'
      fullPath: '/admin/testimonials'
      preLoaderRoute: typeof AdminTestimonialsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/overview': {
      id: '/admin/overview'
      path: '/overview'
      fullPath: '/admin/overview'
      preLoaderRoute: typeof AdminOverviewRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/bookings': {
      id: '/admin/bookings'
      path: '/bookings'
      fullPath: '/admin/bookings'
      preLoaderRoute: typeof AdminBookingsRouteImport
      parentRoute: typeof AdminRoute
    }
  }
}

interface AdminRouteChildren {
  AdminBookingsRoute: typeof AdminBookingsRoute
  AdminOverviewRoute: typeof AdminOverviewRoute
  AdminTestimonialsRoute: typeof AdminTestimonialsRoute
  AdminUsersRoute: typeof AdminUsersRoute
  AdminVehiclesRoute: typeof AdminVehiclesRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminBookingsRoute: AdminBookingsRoute,
  AdminOverviewRoute: AdminOverviewRoute,
  AdminTestimonialsRoute: AdminTestimonialsRoute,
  AdminUsersRoute: AdminUsersRoute,
  AdminVehiclesRoute: AdminVehiclesRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

interface UserRouteChildren {
  UserBookingsRoute: typeof UserBookingsRoute
  UserProfileRoute: typeof UserProfileRoute
  UserTestimonialsRoute: typeof UserTestimonialsRoute
}

const UserRouteChildren: UserRouteChildren = {
  UserBookingsRoute: UserBookingsRoute,
  UserProfileRoute: UserProfileRoute,
  UserTestimonialsRoute: UserTestimonialsRoute,
}

const UserRouteWithChildren = UserRoute._addFileChildren(UserRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  AdminRoute: AdminRouteWithChildren,
  ContactRoute: ContactRoute,
  ContactsRoute: ContactsRoute,
  LocationsRoute: LocationsRoute,
  TestimonialsRoute: TestimonialsRoute,
  UserRoute: UserRouteWithChildren,
  BookingsIndexRoute: BookingsIndexRoute,
  VehiclesIndexRoute: VehiclesIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
